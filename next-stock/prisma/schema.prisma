generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                String             @id @default(uuid())
  name              String
  phone             String?
  users             User[]
  stocks            Stock[]
  saleTransactions  SaleTransaction[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")

  @@map("organizations")
}

model Role {
  id        String    @id @default(uuid())
  name      String    @unique
  users     User[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("roles")
}

model User {
  id                String             @id @default(uuid())
  firstName         String             @map("first_name")
  lastName          String             @map("last_name")
  email             String             @unique
  password          String
  organizationId    String             @map("organization_id")
  organization      Organization       @relation(fields: [organizationId], references: [id])
  roleId            String             @map("role_id")
  role              Role               @relation(fields: [roleId], references: [id])
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")
  sessions          Session[]
  purchases         Purchase[]
  saleTransactions  SaleTransaction[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String   @map("user_id")
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Stock {
  id             String       @id @default(uuid())
  name           String
  quantity       Int
  price          Int
  asset          Int
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  purchases      Purchase[]
  saleItem       SaleItem[]

  @@map("stocks")
}

model Purchase {
  id        String    @id @default(uuid())
  stockId   String    @map("stock_id")
  stock     Stock     @relation(fields: [stockId], references: [id])
  userId    String    @map("uesr_id")
  user      User      @relation(fields: [userId], references: [id])
  quantity  Int
  cost      Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("purchases")
}

model PaymentMethod {
  id                String             @id @default(uuid())
  name              String
  saleTransactions  SaleTransaction[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")

  @@map("payment_methods")
}

model SaleTransaction {
  id              String        @id @default(uuid())
  organizationId  String        @map("organization_id")
  organization    Organization  @relation(fields: [organizationId], references: [id])
  userId          String        @map("uesr_id")
  user            User          @relation(fields: [userId], references: [id])
  paymentMethodId String        @map("payment_method_id")
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  discountAmount  Int
  taxAmount       Int
  tipAmount       Int
  totalAmount     Int
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  saleItem        SaleItem[]

  @@map("sale_transactions")
}

model SaleItem {
  id                 String           @id @default(uuid())
  stockId            String           @map("stock_id")
  stock              Stock            @relation(fields: [stockId], references: [id])
  saleTransactionId  String           @map("sale_transaction_id")
  saleTransaction    SaleTransaction @relation(fields: [saleTransactionId], references: [id])
  quantity           Int
  price              Int
  cost               Int
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  deletedAt          DateTime?        @map("deleted_at")

  @@map("sale_item")
}
